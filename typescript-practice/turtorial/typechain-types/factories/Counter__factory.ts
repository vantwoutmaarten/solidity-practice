/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "CountedTo",
    type: "event",
  },
  {
    inputs: [],
    name: "countDown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countUp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b506105f8806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630bd8599e146100465780635fcbd5b614610064578063a87d942c14610082575b600080fd5b61004e6100a0565b60405161005b919061034d565b60405180910390f35b61006c610183565b604051610079919061034d565b60405180910390f35b61008a610266565b604051610097919061034d565b60405180910390f35b60006100e36040518060400160405280601081526020017f636f756e7455703a20636f756e74203d0000000000000000000000000000000081525060005461026f565b600060016000546100f49190610397565b9050600054811161013a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101319061044a565b60405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e67600054604051610172919061034d565b60405180910390a160005491505090565b60006101c66040518060400160405280601281526020017f636f756e74446f776e3a20636f756e74203d000000000000000000000000000081525060005461026f565b600060016000546101d7919061046a565b9050600054811061021d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610214906104ea565b60405180910390fd5b806000819055507fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e67600054604051610255919061034d565b60405180910390a160005491505090565b60008054905090565b6103078282604051602401610285929190610592565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061030b565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000819050919050565b61034781610334565b82525050565b6000602082019050610362600083018461033e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103a282610334565b91506103ad83610334565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103e2576103e1610368565b5b828201905092915050565b600082825260208201905092915050565b7f55696e74323536206f766572666c6f7700000000000000000000000000000000600082015250565b60006104346010836103ed565b915061043f826103fe565b602082019050919050565b6000602082019050818103600083015261046381610427565b9050919050565b600061047582610334565b915061048083610334565b92508282101561049357610492610368565b5b828203905092915050565b7f55696e7432353620756e646572666c6f77000000000000000000000000000000600082015250565b60006104d46011836103ed565b91506104df8261049e565b602082019050919050565b60006020820190508181036000830152610503816104c7565b9050919050565b600081519050919050565b60005b83811015610533578082015181840152602081019050610518565b83811115610542576000848401525b50505050565b6000601f19601f8301169050919050565b60006105648261050a565b61056e81856103ed565b935061057e818560208601610515565b61058781610548565b840191505092915050565b600060408201905081810360008301526105ac8185610559565b90506105bb602083018461033e565b939250505056fea26469706673582212208da0e036115a48da448edbfa729fe5892f608a2d5881fd5b65085ca1c85d03e364736f6c634300080c0033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Counter";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly contractName: "Counter";
  public readonly contractName: "Counter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
